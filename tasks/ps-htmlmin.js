/*
 * grunt-ps-htmlmin
 * https://github.com/PSelvaraj/grunt-ps-htmlmin
 *
 * Copyright (c) 2024 Peter Selvaraj
 * Licensed under the MIT license.
 */

'use strict';

const fsp = require('fs').promises;
const log = require('grunt-ps-log');
const terser = require('html-minifier-terser');
const timerSvc = require('./services/timer.service');
const htmlminSvc = require('./services/htmlmin.service');

module.exports = function (grunt) {
  grunt.registerMultiTask('psHtmlmin', 'Grunt plugin to minify Html files', async function () {
    const done = this.async();

    const options = this.options({
      caseSensitive: false,
      collapseBooleanAttributes: false,
      collapseInlineTagWhitespace: false,
      collapseWhitespace: true,
      conservativeCollapse: false,
      continueOnParseError: false,
      decodeEntities: false,
      html5: true,
      includeAutoGeneratedTags: true,
      keepClosingSlash: false,
      minifyCSS: false,
      minifyJS: false,
      minifyURLs: false,
      noNewlinesBeforeTagClose: false,
      preserveLineBreaks: false,
      preventAttributesEscaping: false,
      processConditionalComments: false,
      removeAttributeQuotes: false,
      removeComments: true,
      removeEmptyAttributes: false,
      removeEmptyElements: false,
      removeOptionalTags: false,
      removeRedundantAttributes: false,
      removeScriptTypeAttributes: false,
      removeStyleLinkTypeAttributes: false,
      removeTagWhitespace: false,
      sortAttributes: false,
      sortClassName: false,
      trimCustomFragments: false,
      useShortDoctype: false,
    });

    let fileCount = 0;
    const timer = timerSvc();
    const htmlmin = htmlminSvc(fsp, terser);

    const fileExists = filePath => {
      const exists = grunt.file.exists(filePath);
      if (!exists) { log.warn('Source file "' + filePath + '" was not found.'); }
      return exists;
    };

    const minifyFile = async (filePath, destPath, options) => {
      await htmlmin.minifyFile(filePath, destPath, options);
      log.verbose('File "' + destPath + '" created.');
    };

    const list = [];

    for (const f of this.files) {
      const files = f.src.filter(fileExists);

      for (const file of files) {
        list.push(minifyFile(file, f.dest, options));
        fileCount++;
      }
    }

    await Promise.all(list).then(() => {
      log.ok(`${fileCount} files minified in ${timer.getTimeElapsed()}`);
      done();
    });
  });
};
